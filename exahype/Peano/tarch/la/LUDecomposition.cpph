template<int Rows, typename Scalar>
tarch::la::Vector<Rows,Scalar>  tarch::la::backSubstitution(
  const Matrix<Rows,Rows,Scalar>&  R,
  const Vector<Rows,Scalar>&       f
) {
  tarch::la::Vector<Rows,Scalar> x;

  for(int k = Rows-1; k >= 0; k--){
    x(k) = f(k);
    for(int i = k+1; i < Rows; i++){
      x(k) -= R(k, i)*x(i);
    }
    x(k) = x(k)/R(k, k);
  }

  return x;
}


template<int Rows, typename Scalar>
void tarch::la::lu (
  Matrix<Rows,Rows,Scalar>&  A,
  Vector<Rows,Scalar>&       pivots
) {
  for (int k=0; k < Rows; k++){
    int maxIndex = k;
    Scalar max = std::abs(A(k,k));
    for (int i=k+1; i < Rows; i++){
      Scalar current = std::abs(A(i,k));
      if (current > max){
        maxIndex = i;
        max = current;
      }
    }
    pivots(k) = maxIndex;

    // Exchange lines
    for (int j=0; j < Rows; j++){
      Scalar temp   = A(k,j);
      A(k,j)        = A(maxIndex,j);
      A(maxIndex,j) = temp;
    }

    // Compute scaling elements
    for (int i=k+1; i < Rows; i++){
      A(i,k) /= A(k,k);
    }

    // Subtract contributions from each line
    for (int i=k+1; i < Rows; i++){
      for (int j=k+1; j < Rows; j++){
        A(i,j) -= A(i,k) * A(k,j);
      }
    }
  }
}


template<int Rows, typename Scalar>
void tarch::la::lu (
  Matrix<Rows,Rows,Scalar>&  A
) {
  for (int k=0; k < Rows; k++){
    // Compute scaling elements
    for (int i=k+1; i < Rows; i++){
      A(i,k) /= A(k,k);
    }

    // Subtract contributions from each line
    for (int i=k+1; i < Rows; i++){
      for (int j=k+1; j < Rows; j++){
        A(i,j) -= A(i,k) * A(k,j);
      }
    }
  }
}
