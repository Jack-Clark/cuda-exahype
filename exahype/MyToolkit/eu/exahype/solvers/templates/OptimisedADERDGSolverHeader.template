#ifndef __{{Solver}}_CLASS_HEADER__
#define __{{Solver}}_CLASS_HEADER__

// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================

#include <ostream>

#include "{{AbstractSolver}}.h"

{{ProfilerInclude}}
{{ParserInclude}}

namespace {{Project}}{
  class {{Solver}};
}

class {{Project}}::{{Solver}}: public {{Project}}::{{AbstractSolver}} {
  public:  
    {{Solver}}(double maximumMeshSize,exahype::solvers::Solver::TimeStepping timeStepping,std::vector<std::string>& cmdlineargs{{SolverConstructorSignatureExtension}});

    void init(std::vector<std::string>& cmdlineargs{{SolverInitSignatureExtension}});
    static void flux(const double* const Q, double** F);
    static void eigenvalues(const double* const Q, const int normalNonZeroIndex, double* lambda);
    bool hasToAdjustSolution(const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,const double t,const double dt) override;
    static void adjustedSolutionValues(const double* const x,const double w,const double t,const double dt,double* Q);
    void source(const double* const Q, double* S);
    static void boundaryValues(const double* const x,const double t, const double dt, const int faceIndex, const int normalNonZero, const double * const fluxIn, const double* const stateIn, double *fluxOut, double* stateOut);
    void ncp(const double* const Q, const double* const gradQ, double* BgradQ);
    void matrixb(const double* const Q, const int normalNonZero, double* Bn);
    exahype::solvers::Solver::RefinementControl refinementCriterion(const double* luh,const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,double t,const int level) override;

};

#endif // __{{Solver}}_CLASS_HEADER__
