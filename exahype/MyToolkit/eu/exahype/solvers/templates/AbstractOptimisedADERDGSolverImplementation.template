// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================
// ==============================================
// Please do not change the implementations below
// =============================---==============
#include "{{AbstractSolver}}.h"
#include "kernels/aderdg/optimised/Kernels.h"

#include "{{Solver}}.h" // Have to include a proper declaration. Cannot use forward declared classes in static_cast.

// We define the constructor of the actual solver here in order to regenerate it easily.
{{Project}}::{{Solver}}::{{Solver}}(double maximumMeshSize,exahype::solvers::Solver::TimeStepping timeStepping,std::vector<std::string>& cmdlineargs{{SolverConstructorSignatureExtension}}):
  {{AbstractSolver}}::{{AbstractSolver}}(maximumMeshSize,timeStepping{{SolverConstructorArgumentExtension}}) {
  init(cmdlineargs{{SolverInitCallExtension}});
}

{{Project}}::{{AbstractSolver}}::{{AbstractSolver}}(double maximumMeshSize,exahype::solvers::Solver::TimeStepping timeStepping{{SolverConstructorSignatureExtension}}):
  exahype::solvers::ADERDGSolver("{{Solver}}",kernels::aderdg::optimised::getNumberOfVariable(),kernels::aderdg::optimised::getNumberOfParameter(),kernels::aderdg::optimised::getBasisSize(),
                                 maximumMeshSize,timeStepping{{SolverConstructorArgumentExtension}}) {
}

void {{Project}}::{{AbstractSolver}}::spaceTimePredictor(double* lQhbnd,double* lFhbnd,double** tempSpaceTimeUnknowns,double** tempSpaceTimeFluxUnknowns,double* tempUnknowns,double* tempFluxUnknowns,double* tempStateSizedVectors,const double* const luh,const tarch::la::Vector<DIMENSIONS,double>& dx,const double dt, double* pointForceSources) {
{{BeforeSpaceTimePredictor}}
  kernels::aderdg::optimised::picardLoopNonlinear<{{Solver}}::{{Solver}}::flux>(luh, dt, dx, tempSpaceTimeUnknowns[0], tempSpaceTimeUnknowns[1], tempSpaceTimeUnknowns[2], tempSpaceTimeUnknowns[3],tempSpaceTimeFluxUnknowns[0], nullptr, nullptr, nullptr); //S, gradQ, BGradQ
  kernels::aderdg::optimised::predictorNonlinear(tempSpaceTimeUnknowns[0], tempSpaceTimeFluxUnknowns[0], tempUnknowns, tempFluxUnknowns);
  kernels::aderdg::optimised::extrapolatorNonlinear(tempUnknowns, tempFluxUnknowns, lQhbnd, lFhbnd);
{{AfterSpaceTimePredictor}}
}



void {{Project}}::{{AbstractSolver}}::solutionUpdate(double* luh,const double* const lduh,const double dt) {
{{BeforeSolutionUpdate}}
  kernels::aderdg::optimised::solutionUpdate( luh, lduh, dt );
{{AfterSolutionUpdate}}
}



void {{Project}}::{{AbstractSolver}}::volumeIntegral(double* lduh,const double* const lFhi,const tarch::la::Vector<DIMENSIONS,double>& dx) {
{{BeforeVolumeIntegral}}
  kernels::aderdg::optimised::volumeIntegral( lduh, lFhi, dx );
{{AfterVolumeIntegral}}
}



void {{Project}}::{{AbstractSolver}}::surfaceIntegral(double* lduh,const double* const lFhbnd,const tarch::la::Vector<DIMENSIONS,double>& dx) {
{{BeforeSurfaceIntegral}}
  kernels::aderdg::optimised::surfaceIntegral( lduh, lFhbnd, dx );
{{AfterSurfaceIntegral}}
}



void {{Project}}::{{AbstractSolver}}::riemannSolver(double* FL,double* FR,const double* const QL,const double* const QR,double* tempFaceUnknownsArray,double** tempStateSizedVectors,double** tempStateSizedSquareMatrices,const double dt,const int normalNonZeroIndex) {
  assertion2(normalNonZeroIndex>=0,dt,normalNonZeroIndex);
  assertion2(normalNonZeroIndex<DIMENSIONS,dt,normalNonZeroIndex);
{{BeforeRiemannSolver}}
  kernels::aderdg::optimised::riemannSolver<{{Solver}}::{{Solver}}::eigenvalues>( FL, FR, QL, QR, dt, normalNonZeroIndex );
{{AfterRiemannSolver}}
}



void {{Project}}::{{AbstractSolver}}::boundaryConditions(double* fluxOut,double* stateOut,const double* const fluxIn,const double* const stateIn,const tarch::la::Vector<DIMENSIONS,double>& cellCentre,const tarch::la::Vector<DIMENSIONS,double>& cellSize,const double t,const double dt,const int faceIndex,const int normalNonZero) {
{{BeforeBoundaryConditions}}
  kernels::aderdg::optimised::boundaryConditions<{{Solver}}::{{Solver}}::boundaryValues>(fluxOut, stateOut, fluxIn, stateIn, cellCentre, cellSize, t, dt, faceIndex, normalNonZero );
{{AfterBoundaryConditions}}
}



double {{Project}}::{{AbstractSolver}}::stableTimeStepSize(const double* const luh,double* tempEigenvalues,const tarch::la::Vector<DIMENSIONS,double>& dx) {
{{BeforeStableTimeStepSize}}
  double d = kernels::aderdg::optimised::stableTimeStepSize<{{Solver}}::{{Solver}}::eigenvalues>( luh, dx );
{{AfterStableTimeStepSize}}
  return d;
}



void {{Project}}::{{AbstractSolver}}::solutionAdjustment(double *luh,const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,double t,double dt) {
{{BeforeSolutionAdjustment}}
  kernels::aderdg::optimised::solutionAdjustment<{{Solver}}::{{Solver}}::adjustedSolutionValues>( luh, center, dx, t, dt );
{{AfterSolutionAdjustment}}
}



void {{Project}}::{{AbstractSolver}}::faceUnknownsProlongation(double* lQhbndFine,double* lFhbndFine,const double* lQhbndCoarse,const double* lFhbndCoarse,const int coarseGridLevel,const int fineGridLevel,const tarch::la::Vector<DIMENSIONS-1,int>& subfaceIndex) {
{{BeforeFaceUnknownsProlongation}}
  // kernels::aderdg::optimised::faceUnknownsProlongation( lQhbndFine, lFhbndFine, lQhbndCoarse, lFhbndCoarse, coarseGridLevel, fineGridLevel, subfaceIndex, getNumberOfVariables(), getNodesPerCoordinateAxis() ); //TODO JMG, uncomment in Toolkit when kernel implemented
{{AfterFaceUnknownsProlongation}}
}



void {{Project}}::{{AbstractSolver}}::faceUnknownsRestriction(double* lQhbndCoarse,double* lFhbndCoarse,const double* lQhbndFine,const double* lFhbndFine,const int coarseGridLevel,const int fineGridLevel,const tarch::la::Vector<DIMENSIONS-1,int>& subfaceIndex) {
{{BeforeFaceUnknownsRestriction}}
  // kernels::aderdg::optimised::faceUnknownsRestriction( lQhbndCoarse, lFhbndCoarse, lQhbndFine, lFhbndFine, coarseGridLevel, fineGridLevel, subfaceIndex, getNumberOfVariables(), getNodesPerCoordinateAxis() ); //TODO JMG, uncomment in Toolkit when kernel implemented
{{AfterFaceUnknownsRestriction}}
}



void {{Project}}::{{AbstractSolver}}::volumeUnknownsProlongation(double* luhFine,const double* luhCoarse,const int coarseGridLevel,const int fineGridLevel,const tarch::la::Vector<DIMENSIONS,int>& subcellIndex) {
{{BeforeVolumeUnknownsProlongation}}
  // kernels::aderdg::optimised::volumeUnknownsProlongation( luhFine, luhCoarse, coarseGridLevel, fineGridLevel, subcellIndex, getNumberOfVariables(), getNodesPerCoordinateAxis() ); //TODO JMG, uncomment in Toolkit when kernel implemented
{{AfterVolumeUnknownsProlongation}}
}



void {{Project}}::{{AbstractSolver}}::volumeUnknownsRestriction(double* luhCoarse,const double* luhFine,const int coarseGridLevel,const int fineGridLevel,const tarch::la::Vector<DIMENSIONS,int>& subcellIndex) {
{{BeforeVolumeUnknownsRestriction}}
  // kernels::aderdg::optimised::volumeUnknownsRestriction( luhCoarse, luhFine, coarseGridLevel, fineGridLevel, subcellIndex, getNumberOfVariables(), getNodesPerCoordinateAxis() ); //TODO JMG, uncomment in Toolkit when kernel implemented
{{AfterVolumeUnknownsRestriction}}
}
