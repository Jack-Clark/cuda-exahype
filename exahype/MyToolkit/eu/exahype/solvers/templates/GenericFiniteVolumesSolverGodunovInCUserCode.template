#include "{{Solver}}.h"

#include "{{Solver}}_Variables.h"

void {{Project}}::{{Solver}}::init(std::vector<std::string>& cmdlineargs{{SolverInitSignatureExtension}}) {
  // @todo Please implement/augment if required
}

bool {{Project}}::{{Solver}}::hasToAdjustSolution(const tarch::la::Vector<DIMENSIONS, double>& center, const tarch::la::Vector<DIMENSIONS, double>& dx, const double t, const double dt) {
  // @todo Please implement/augment if required
  return tarch::la::equals(t,0.0);
}

void {{Project}}::{{Solver}}::adjustedSolutionValues(const double* const x,const double w,const double t,const double dt, double* Q) {
  // Dimensions             = {{Dimensions}}
  // Number of variables    = {{Elements}} (#unknowns + #parameters)
  
  // @todo Please implement/augment if required
{{AdjustedSolutionValues}}
}

exahype::solvers::Solver::RefinementControl {{Project}}::{{Solver}}::refinementCriterion(const double* luh, const tarch::la::Vector<DIMENSIONS, double>& center,const tarch::la::Vector<DIMENSIONS, double>& dx, double t,const int level) {
  // @todo Please implement/augment if required
  return exahype::solvers::Solver::RefinementControl::Keep;
}


void {{Project}}::{{Solver}}::eigenvalues(const double* const Q, const int normalNonZeroIndex, double* lambda) {
  // Dimensions             = {{Dimensions}}
  // Number of variables    = {{Elements}} (#unknowns + #parameters)
  
  // @todo Please implement/augment if required
{{Eigenvalues}}
}

void {{Project}}::{{Solver}}::flux(const double* const Q, double** F) {
  // Dimensions             = {{Dimensions}}
  // Number of variables    = {{Elements}} (#unknowns + #parameters)
  
  // @todo Please implement/augment if required
{{Flux}}
}


void {{Project}}::{{Solver}}::source(const double* const Q, double* S) {
  // Dimensions             = {{Dimensions}}
  // Number of variables    = {{Elements}} (#unknowns + #parameters)
  
  // @todo Please implement/augment if required
{{Source}}
}

void {{Project}}::{{Solver}}::boundaryValues(
    const double* const x,
    const double t,const double dt,
    const int faceIndex,
    const int normalNonZero,
    const double* const stateInside,
    double* stateOutside) {
  // Dimensions             = {{Dimensions}}
  // Number of variables    = {{Elements}} (#unknowns + #parameters)

  // @todo Please implement/augment if required
{{BoundaryValues}}
}