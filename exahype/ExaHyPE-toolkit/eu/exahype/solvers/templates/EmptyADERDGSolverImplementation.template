#include "{{Solver}}.h"

#include "tarch/la/ScalarOperations.h"

// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================
// ==============================================
// Please do not change the implementations below
// =============================---==============
#include "{{Solver}}.h"

#include "kernels/aderdg/generic/Kernels.h"

{{Project}}::{{Solver}}::{{Solver}}(double maximumMeshSize, exahype::solvers::Solver::TimeStepping timeStepping, std::vector<std::string>& cmdlineargs{{SolverConstructorSignatureExtension}}):
  exahype::solvers::{{Solver}}Solver("{{Solver}}", nVar /* numberOfUnknowns */, nParams /* numberOfParameters */, {{Order}} + 1  /* nodesPerCoordinateAxis */, maximumMeshSize, timeStepping{{SolverConstructorArgumentExtension}}) {
  // @todo Please implement/augment if required
}



void {{Project}}::{{Solver}}::spaceTimePredictor(double* lQhbnd,double* lFhbnd,double** tempSpaceTimeUnknowns,double** tempSpaceTimeFluxUnknowns,double*  tempUnknowns,double*  tempFluxUnknowns,const double* const luh,const tarch::la::Vector<DIMENSIONS,double>& dx,const double dt) {
  // @todo Please implement/augment if required
}



void {{Project}}::{{Solver}}::solutionUpdate(double* luh, const double* const lduh, const double dt) {
  // @todo Please implement/augment if required
}



void {{Project}}::{{Solver}}::volumeIntegral(double* lduh, const double* const lFhi, const tarch::la::Vector<DIMENSIONS,double>& dx) {
  // @todo Please implement/augment if required
}



void {{Project}}::{{Solver}}::surfaceIntegral(double* lduh, const double* const lFhbnd, const tarch::la::Vector<DIMENSIONS,double>& dx) {
  // @todo Please implement/augment if required
}



void {{Project}}::{{Solver}}::riemannSolver(double* FL, double* FR, const double* const QL, const double* const QR, double* tempFaceUnknownsArray, double** tempStateSizedVectors, double** tempStateSizedSquareMatrices, const double dt, const int normalNonZeroIndex) {
  assertion2(normalNonZeroIndex>=0,dt,normalNonZeroIndex);
  assertion2(normalNonZeroIndex<DIMENSIONS,dt,normalNonZeroIndex);
  // @todo Please implement/augment if required
}



void {{Project}}::{{Solver}}::boundaryConditions(double* fluxOut,double* stateOut,const double* const fluxIn,const double* const stateIn,const tarch::la::Vector<DIMENSIONS, double>& cellCentre,const tarch::la::Vector<DIMENSIONS,double>& cellSize,const double t,const double dt,const int faceIndex,const int normalNonZero) {
  // @todo Please implement/augment if required
}



double {{Project}}::{{Solver}}::stableTimeStepSize(const double* const luh,double* tempEigenvalues,const tarch::la::Vector<DIMENSIONS,double>& dx) {
  // @todo Please implement/augment if required
  return std::numeric_limits<double>::max();
}



void {{Project}}::{{Solver}}::solutionAdjustment(double *luh,const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,double t,double dt) {
  // @todo Please implement/augment if required
}



void {{Project}}::{{Solver}}::faceUnknownsProlongation(double* lQhbndFine,double* lFhbndFine,const double* lQhbndCoarse,const double* lFhbndCoarse,const int coarseGridLevel,const int fineGridLevel,const tarch::la::Vector<DIMENSIONS-1, int>& subfaceIndex) {
  // @todo Please implement/augment if required
}



void {{Project}}::{{Solver}}::faceUnknownsRestriction(double* lQhbndCoarse,double* lFhbndCoarse,const double* lQhbndFine,const double* lFhbndFine,const int coarseGridLevel,const int fineGridLevel,const tarch::la::Vector<DIMENSIONS-1, int>& subfaceIndex) {
  // @todo Please implement/augment if required
}



void {{Project}}::{{Solver}}::volumeUnknownsProlongation(double* luhFine, const double* luhCoarse, const int coarseGridLevel, const int fineGridLevel, const tarch::la::Vector<DIMENSIONS, int>& subcellIndex) {
  // @todo Please implement/augment if required
}



void {{Project}}::{{Solver}}::volumeUnknownsRestriction(double* luhCoarse, const double* luhFine, const int coarseGridLevel, const int fineGridLevel, const tarch::la::Vector<DIMENSIONS, int>& subcellIndex) {
  // @todo Please implement/augment if required
}

