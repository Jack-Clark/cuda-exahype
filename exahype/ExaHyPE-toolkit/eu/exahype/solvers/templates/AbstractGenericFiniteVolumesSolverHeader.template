#ifndef __Abstract{{Solver}}_CLASS_HEADER__
#define __Abstract{{Solver}}_CLASS_HEADER__

// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================
#include <ostream>

#include "exahype/Parser.h"
#include "exahype/solvers/FiniteVolumesSolver.h"
{{ProfilerInclude}}

namespace {{Project}}{
  class Abstract{{Solver}};
  class {{Solver}};
}

class {{Project}}::Abstract{{Solver}} : public exahype::solvers::FiniteVolumesSolver {
  public:
    static constexpr int NumberOfVariables  = {{NumberOfVariables}};
    static constexpr int NumberOfParameters = {{NumberOfParameters}};
    static constexpr int PatchSize          = {{PatchSize}};
  
    class Variables;
    class ReadOnlyVariables;
    class Fluxes;
{{NamingSchemes}}
    
    Abstract{{Solver}}(double maximumMeshSize,exahype::solvers::Solver::TimeStepping timeStepping{{SolverConstructorSignatureExtension}});
    
    double stableTimeStepSize(const double* const luh,double* tempEigenvalues,const tarch::la::Vector<DIMENSIONS,double>& dx) override;
    void solutionAdjustment(double* luh,const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,double t,double dt) override;
    void solutionUpdate(double* luhNew,const double* luh,double** tempStateSizedArrays,double** tempUnknowns,const tarch::la::Vector<DIMENSIONS,double>& dx,const double dt,double& maxAdmissibleDt) override;
    void ghostLayerFilling(double* luh,const double* luhNeighbour,const tarch::la::Vector<DIMENSIONS,int>& neighbourPosition) override;
    void ghostLayerFillingAtBoundary(double* luh,const double* luhbnd,const tarch::la::Vector<DIMENSIONS,int>& boundaryPosition) override;
    void boundaryLayerExtraction(double* luhbnd,const double* luh,const tarch::la::Vector<DIMENSIONS,int>& boundaryPosition) override;
    void boundaryConditions(double* stateOut,const double* const stateIn,const tarch::la::Vector<DIMENSIONS,double>& cellCentre,const tarch::la::Vector<DIMENSIONS,double>& cellSize,const double t,const double dt,const int faceIndex,const int normalNonZero) override;
};


#endif // __Abstract{{Solver}}_CLASS_HEADER__
