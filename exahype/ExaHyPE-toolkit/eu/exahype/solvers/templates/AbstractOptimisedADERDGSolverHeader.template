#ifndef __{{AbstractSolver}}_CLASS_HEADER__
#define __{{AbstractSolver}}_CLASS_HEADER__

// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================

#include <ostream>

#include "exahype/solvers/ADERDGSolver.h"
#include "kernels/aderdg/optimised/Kernels.h"

{{ProfilerInclude}}

namespace {{Project}}{
  class {{Solver}};
  class {{AbstractSolver}};
}

class {{Project}}::{{AbstractSolver}}: public exahype::solvers::ADERDGSolver {
  public:
  
    static constexpr int nVar    = kernels::aderdg::optimised::getNumberOfVariable();
    static constexpr int nParams = kernels::aderdg::optimised::getNumberOfParameter();
    static constexpr int nDim    = kernels::aderdg::optimised::getDimension();
    static constexpr int order   = kernels::aderdg::optimised::getBasisSize() -1;
  
    {{AbstractSolver}}(double maximumMeshSize,exahype::solvers::Solver::TimeStepping timeStepping{{SolverConstructorSignatureExtension}});

    void spaceTimePredictor(double* lQhbnd,double* lFhbnd,double** tempSpaceTimeUnknowns,double** tempSpaceTimeFluxUnknowns,double* tempUnknowns,double* tempFluxUnknowns,double* tempStateSizedVectors,const double* const luh,const tarch::la::Vector<DIMENSIONS,double>& dx,const double dt, double* pointForceSources) override; 
    void solutionUpdate(double* luh,const double* const lduh,const double dt) override;
    void volumeIntegral(double* lduh,const double* const lFhi,const tarch::la::Vector<DIMENSIONS,double>& dx) override;
    void surfaceIntegral(double* lduh,const double* const lFhbnd,const tarch::la::Vector<DIMENSIONS,double>& dx) override;
    void riemannSolver(double* FL,double* FR,const double* const QL,const double* const QR,double* tempFaceUnknownsArray,double** tempStateSizedVectors,double** tempStateSizedSquareMatrices,const double dt,const int normalNonZeroIndex) override;
    void boundaryConditions(double* fluxOut,double* stateOut,const double* const fluxIn,const double* const stateIn,const tarch::la::Vector<DIMENSIONS,double>& cellCentre,const tarch::la::Vector<DIMENSIONS,double>& cellSize,const double t,const double dt,const int faceIndex,const int normalNonZero) override;
    double stableTimeStepSize(const double* const luh,double* tempEigenvalues,const tarch::la::Vector<DIMENSIONS,double>& dx) override;
    void solutionAdjustment(double *luh,const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,const double t,const double dt) override;
    void faceUnknownsProlongation(double* lQhbndFine,double* lFhbndFine,const double* lQhbndCoarse,const double* lFhbndCoarse,const int coarseGridLevel,const int fineGridLevel,const tarch::la::Vector<DIMENSIONS-1,int>& subfaceIndex) override;
    void faceUnknownsRestriction(double* lQhbndCoarse,double* lFhbndCoarse,const double* lQhbndFine,const double* lFhbndFine,const int coarseGridLevel,const int fineGridLevel,const tarch::la::Vector<DIMENSIONS-1,int>& subfaceIndex) override;
    void volumeUnknownsProlongation(double* luhFine,const double* luhCoarse,const int coarseGridLevel,const int fineGridLevel,const tarch::la::Vector<DIMENSIONS,int>& subcellIndex) override;
    void volumeUnknownsRestriction(double* luhCoarse,const double* luhFine,const int coarseGridLevel,const int fineGridLevel,const tarch::la::Vector<DIMENSIONS,int>& subcellIndex) override;

    //padded array size
    int getTempSpaceTimeUnknownsSize()     const {return kernels::aderdg::optimised::getTempSpaceTimeUnknownsSize();    }
    int getTempSpaceTimeFluxUnknownsSize() const {return kernels::aderdg::optimised::getTempSpaceTimeFluxUnknownsSize();}
    int getTempUnknownsSize()              const {return kernels::aderdg::optimised::getTempUnknownsSize();             }
    int getTempFluxUnknownsSize()          const {return kernels::aderdg::optimised::getTempFluxUnknownsSize();         }
    int getBndFaceSize()                   const {return kernels::aderdg::optimised::getBndFaceSize();                  }
    int getBndTotalSize()                  const {return kernels::aderdg::optimised::getBndTotalSize();                 }
    
    bool alignTempArray()                  const {return true;}
    
    bool usePaddedData_nVar() const {return true;}
    bool usePaddedData_nDoF() const {return true;}
};

#endif // __{{AbstractSolver}}_CLASS_HEADER__
