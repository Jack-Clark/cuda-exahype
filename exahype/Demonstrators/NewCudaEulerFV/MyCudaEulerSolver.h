#ifndef __MyCudaEulerSolver_CLASS_HEADER__
#define __MyCudaEulerSolver_CLASS_HEADER__

// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================
#include "exahype/Parser.h"


#include <ostream>

#include "AbstractMyCudaEulerSolver.h"

namespace NewCudaEulerFV{
  class MyCudaEulerSolver;
}

class NewCudaEulerFV::MyCudaEulerSolver : public NewCudaEulerFV::AbstractMyCudaEulerSolver {
  public:
    MyCudaEulerSolver(double maximumMeshSize,exahype::solvers::Solver::TimeStepping timeStepping,std::vector<std::string>& cmdlineargs);
    
    void init(std::vector<std::string>& cmdlineargs);
    
    exahype::solvers::Solver::RefinementControl refinementCriterion(const double* luh,const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,double t,const int level) override;
    
    bool hasToAdjustSolution(const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,const double t,const double dt) override;
    void adjustedSolutionValues(const double* const x,const double w,const double t,const double dt,double* Q); 
    void eigenvalues(const double* const Q,const int normalNonZeroIndex,double* lambda);                        
    void flux(const double* const Q,double** F);                                                                
    void source(const double* const Q,double* S);                                                               
    void boundaryValues(const double* const x,const double t,const double dt,const int faceIndex,const int normalNonZero,const double* const stateIn,double* stateOut);
};


#endif // __MyCudaEulerSolver_CLASS_HEADER__
