/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
 
// #include "kernels/aderdg/generic/Kernels.h"

// #include "string.h"

// #include "tarch/la/Scalar.h"
// #include "tarch/la/ScalarOperations.h"

// #include "kernels/GaussLegendreQuadrature.h"
// #include "kernels/DGMatrices.h"

// #define EXAHYPE_CFL_FACTOR 0.9

// #include <fstream>

// using std::endl;
// using std::cout;


extern "C" {
void aderspacetimepredictorlinear_(double* lQhi, double* lFhi, double* lQbnd,
                                   double* lFbnd, const double* luhTemp, double* dtTemp,
                                   double* dxTemp);
}

template <typename SolverType>
void kernels::aderdg::generic::fortran::spaceTimePredictorLinear(
    SolverType& solver,
    double*  lQbnd, double* lFbnd,
    double** tempSpaceTimeUnknowns,
    double** tempSpaceTimeFluxUnknowns,
    double*  tempUnknowns,
    double*  tempFluxUnknowns,
    double*  tempStateSizedVector,
    const double* const luh,
    const tarch::la::Vector<DIMENSIONS, double>& dx,
    const double dt,
    double* tempPointForceSources 
    ){


  const int numberOfVariables = solver.getNumberOfVariables();
  const int basisSize         = solver.getNodesPerCoordinateAxis();
  const int numSpaceDof = numberOfVariables * basisSize * basisSize * basisSize;
  
     double dtTemp[1];
     dtTemp[0] = dt;

     double dxTemp[3];
     dxTemp[0] = dx[0];
     dxTemp[1] = dx[1];
     dxTemp[2] = dx[2];
    

   double* lQhi =  tempUnknowns;
   double* lFhi = tempFluxUnknowns;

   

   aderspacetimepredictorlinear_(lQhi, lFhi, lQbnd, lFbnd, luh, dtTemp, dxTemp);			

 }
