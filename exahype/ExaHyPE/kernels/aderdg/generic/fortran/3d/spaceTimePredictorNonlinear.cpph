/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
 
// #include "kernels/aderdg/generic/Kernels.h"

// #include "string.h"

// #include "tarch/la/Scalar.h"
// #include "tarch/la/ScalarOperations.h"

// #include "kernels/GaussLegendreQuadrature.h"
// #include "kernels/DGMatrices.h"

// #define EXAHYPE_CFL_FACTOR 0.9

// #include <fstream>

// using std::endl;
// using std::cout;

extern "C" {
void aderpicardloopnonlinear_(const double *luhTemp, double *dtTemp, double *dxTemp,
                              double *lQi, double *lFi);
// void aderpredictor_(double *lQi, double *lFi, double *lQhi, double *lFhi);
void aderpredictornonlinear_(double *lQi, double *lFi_x, double *lFhi_y,
                             double *lFhi_z, double *lQhi, double *lFhi);
// void aderextrapolator_(double *lQhi, double *lFhi, double *lQbnd, double
// *lFbnd);
void aderextrapolatornonlinear_(double *lQhi, double *lFhi_x, double *lFhi_y,
                                double *lFhi_z, double *lQbnd, double *lFbnd);
}

// template <void PDEFlux3d(const double *const Q, double **F),
          // void PDESource(const double* const Q, double* S)>
// void kernels::aderdg::generic::fortran::spaceTimePredictorNonlinear(
    // double *lQi, double *lFi, double *lQhi, double *lFhi, double *lQbnd,
    // double *lFbnd, const double *const luh,
    // const tarch::la::Vector<DIMENSIONS, double> &dx, const double dt,
    // const int numberOfVariables, const int numberOfParameters, const int basisSize) {
template <typename SolverType>
void kernels::aderdg::generic::fortran::spaceTimePredictorNonlinear(
    SolverType& solver,
    double*  lQbnd, double* lFbnd,
    double** tempSpaceTimeUnknowns,
    double** tempSpaceTimeFluxUnknowns,
    double*  tempUnknowns,
    double*  tempFluxUnknowns,
    double*  tempStateSizedVector,
    const double* const luh,
    const tarch::la::Vector<DIMENSIONS, double>& dx,
    const double dt,
    double* tempPointForceSources //Not used, should be nullptr
    ){
  // circumvent 'const double'
  // double *luhTemp =
      // new double[numberOfVariables * basisSize * basisSize * basisSize];
  // memcpy(luhTemp, luh, numberOfVariables * basisSize * basisSize * basisSize *
                           // sizeof(double));

  double* lQi  = tempSpaceTimeUnknowns[0];
  double* lFi  = tempSpaceTimeFluxUnknowns[0];
  double* lQhi = tempUnknowns;
  double* lFhi = tempFluxUnknowns;

  double dtTemp[1];
  dtTemp[0] = dt;

  double dxTemp[3];
  dxTemp[0] = dx[0];
  dxTemp[1] = dx[1];
  dxTemp[2] = dx[2];

  // space-time predictor:
  aderpicardloopnonlinear_(luh, dtTemp, dxTemp, lQi, lFi);
  
  const int numberOfVariables = solver.getNumberOfVariables();
  const int basisSize         = solver.getNodesPerCoordinateAxis();
  const int numSpaceDof = numberOfVariables * basisSize * basisSize * basisSize;

  // std::cout << "numSpaceDof: " << numSpaceDof << std::endl;
  // lFhi = [ lFhi_x | lFhi_y | lFhi_z ]
  // aderpredictor_(lQi,lFi,lQhi,lFhi);
  aderpredictornonlinear_(lQi, lFi, lQhi, &lFhi[0 * numSpaceDof],
                          &lFhi[1 * numSpaceDof], &lFhi[2 * numSpaceDof]);
  // aderextrapolator_(lQhi,lFhi,lQbnd,lFbnd);
  aderextrapolatornonlinear_(lQhi, &lFhi[0 * numSpaceDof],
                             &lFhi[1 * numSpaceDof], &lFhi[2 * numSpaceDof],
                             lQbnd, lFbnd);

  // delete[] luhTemp;

  // std::ofstream ofs;
  // ofs.open ("aoutput_lQbnd.txt", std::ofstream::out);
  // for (int ii=0; ii<numberOfVariables*6*basisSize*basisSize; ii++) {
  // ofs << lQbnd[ii] << "\n";
  // }
  // ofs.close();

  // ofs.open ("aoutput_lQbndFortran.txt", std::ofstream::out);
  // for (int ii=0; ii<numberOfVariables*6*basisSize*basisSize; ii++) {
  // ofs << lQbndFortran[ii] << "\n";
  // }
  // ofs.close();
}
