/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/

#include <cstring>
#include <tarch/la/Vector.h>

#include "../../../../DGMatrices.h"
#include "../../../../GaussLegendreQuadrature.h"
#include "../../../../KernelUtils.h"

#if DIMENSIONS == 2

namespace kernels {
namespace aderdg {
namespace generic {
namespace c {

namespace {

template <typename SolverType>
void aderPicardLoopNonlinear(SolverType& solver,
                             const double* luh, const double dt,
                             const tarch::la::Vector<DIMENSIONS, double>& dx,
                             double* lQi, double* lQi_old, double* rhs, double* rhs_0,
                             double* lFi, double* gradQ, double* BGradQ) {
  const int numberOfVariables = solver.getNumberOfVariables();
  const int basisSize = solver.getNodesPerCoordinateAxis();

  idx3 idx_luh(basisSize, basisSize, numberOfVariables); // idx_luh(y,x,nVar)
  idx4 idx_lQi(basisSize, basisSize, basisSize, numberOfVariables); // idx_lQi(y,x,t,nVar)
  idx5 idx_lFi(basisSize, basisSize, basisSize, DIMENSIONS + 1,
      numberOfVariables); // idx_lFi(t, y, x, nDim + 1 for Source, nVar)

  const int order = basisSize - 1;
  const int basisSize2 = basisSize * basisSize;
  const int basisSize3 = basisSize2 * basisSize;

  // 1. Trivial initial guess
  for (int j = 0; j < basisSize; j++) { // j == y
    for (int k = 0; k < basisSize; k++) { // k == x
      for (int l = 0; l < basisSize; l++) { // l == t
        for (int m = 0; m < numberOfVariables; m++) { // m == Variables
          // Fortran: lQi(m,:,k,j) = luh(m,k,j)
          lQi[idx_lQi(j, k, l, m)] = luh[idx_luh(j, k, m)];
          // if(l==0) printf("luh[%d,%d,t=0,%d] = %.20e\n", j, k, m, luh[idx_luh(j, k, m)]);
        }
      }
    }
  }

  // 2. Compute the contribution of the initial condition uh to the time update
  idx4 idx_rhs(basisSize, basisSize, basisSize, numberOfVariables); // idx_rhs(t,y,x,nVar)
  for (int j = 0; j < basisSize; j++) { // j == y
    for (int k = 0; k < basisSize; k++) { // k == x
      const double weight = kernels::gaussLegendreWeights[order][j] *
          kernels::gaussLegendreWeights[order][k];
      for (int l = 0; l < numberOfVariables; l++) {
        for (int m = 0; m < basisSize; m++) { // time
          rhs_0[idx_rhs(m, j, k, l)] =
              weight * kernels::F0[order][m] * luh[idx_luh(j, k, l)];
        }
      }
    }
  }

  // 3. Discrete Picard iterations
  const int MaxIterations = 2 * (order + 1);

  // spatial gradient of q
  idx5 idx_gradQ(basisSize, basisSize, basisSize, DIMENSIONS, numberOfVariables); // idx_gradQ(y,x,t,nDim,nVar)

  for (int iter = 0; iter < MaxIterations; iter++) {
    // Save old space-time DOF
    std::memcpy(lQi_old, lQi, basisSize3 * numberOfVariables * sizeof(double));

    for (int i = 0; i < basisSize; i++) {  // time DOF, i=t
      for (int k = 0; k < basisSize; k++) { // presumably k=y
        for (int l = 0; l < basisSize; l++) { // presumably l=x
          // Call PDE fluxes
          const double* Q = &lQi[idx_lQi(k, l, i, 0)];
          double* F[2];
          F[0] = &lFi[idx_lFi(i, k, l, 0, 0)];
          F[1] = &lFi[idx_lFi(i, k, l, 1, 0)];
          double* S = &lFi[idx_lFi(i, k, l, 2, 0)];
          solver.flux(Q, F);
          solver.source(Q, S);
        }
      }

      // Copy rhs0 -> rhs
      for (int k = 0; k < basisSize; k++) { // y
        for (int l = 0; l < basisSize; l++) { // x
          for (int m = 0; m < numberOfVariables; m++) {
            rhs[idx_rhs(i, k, l, m)] = rhs_0[idx_rhs(i, k, l, m)];
          }
        }
      }

      // Sven: Compute gradients
      std::memset(gradQ, 0, basisSize3 * DIMENSIONS * numberOfVariables * sizeof(double));
      // Compute the "derivatives" (contributions of the stiffness matrix)
      // x direction (independent from the y derivatives)
      for (int k = 0; k < basisSize; k++) { // k == y
        const double weight = kernels::gaussLegendreWeights[order][i] *
            kernels::gaussLegendreWeights[order][k];
        const double updateSize = weight * dt / dx[0];

        // Matrix operation
        for (int l = 0; l < basisSize; l++) { // l == x
          for (int m = 0; m < numberOfVariables; m++) {
            for (int n = 0; n < basisSize; n++) { // n == matmul x
              rhs[idx_rhs(i, k, l, m)] -= updateSize *
                  lFi[idx_lFi(i, k, n, 0, m)] *
                  kernels::Kxi[order][n][l];
              gradQ[idx_gradQ(k, l, i, /*x*/0, m)] += 1.0 / dx[0] *
                  lQi[idx_lQi(k,n,i,m)] *
                  kernels::dudx[order][l][n];

            }
          }
        }
      }

      // y direction (independent from the x derivatives)
      for (int k = 0; k < basisSize; k++) { // k == x
        const double weight = kernels::gaussLegendreWeights[order][i] *
            kernels::gaussLegendreWeights[order][k];
        const double updateSize = weight * dt / dx[1];

        // Matrix operation
        for (int l = 0; l < basisSize; l++) { // l == y
          for (int m = 0; m < numberOfVariables; m++) {
            for (int n = 0; n < basisSize; n++) { // n = matmul y
              rhs[idx_rhs(i, l, k, m)] -= updateSize *
                  lFi[idx_lFi(i, n, k, 1, m)] *
                  kernels::Kxi[order][n][l];
              gradQ[idx_gradQ(l, k, i, /*y*/1, m)] += 1.0 / dx[1] *
                  lQi[idx_lQi(n, k, i, m)] *
                  kernels::dudx[order][l][n]; /* l,n: transpose */
            }
          }
        }
      }

      // source
      for (int k = 0; k < basisSize; k++) { // k == y
        for (int l = 0; l < basisSize; l++) { // l == x
          const double weight = kernels::gaussLegendreWeights[order][i] *
              kernels::gaussLegendreWeights[order][k] *
              kernels::gaussLegendreWeights[order][l];
          const double updateSize = weight * dt;
          double* S = &lFi[idx_lFi(i, k, l, 2, 0)];

          // Compute the Nonconservative part NCP. Caveats: BGradQ is a vector
          solver.ncp(&lQi[idx_lQi(k, l, i, 0)], &gradQ[idx_gradQ(k, l, i, 0, 0)], BGradQ);

          for (int m = 0; m < numberOfVariables; m++) {
            //if(m==0) printf("iter %d: BGradQ[%d,%d][%d] = %f\n", iter, k, l,m, BGradQ[m]);
            S[m] -= BGradQ[m]; // <-- adding the BGradQ to the Source was missing!
            rhs[idx_rhs(i, k, l, m)] += updateSize * S[m];
          }
        }
      }
    }  // end time dof


    // 4. Multiply with (K1)^(-1) to get the discrete time integral of the
    // discrete Picard iteration
    std::memset(lQi, 0, basisSize3 * numberOfVariables * sizeof(double));
    for (int j = 0; j < basisSize; j++) { // j == y
      for (int k = 0; k < basisSize; k++) { // k == x
        const double weight = kernels::gaussLegendreWeights[order][j] *
            kernels::gaussLegendreWeights[order][k];
        const double iweight = 1.0 / weight;

        // Matrix operation
        for (int l = 0; l < basisSize; l++) { // lQi time
          for (int m = 0; m < numberOfVariables; m++) {
            for (int n = 0; n < basisSize; n++) { // matmul time
              lQi[idx_lQi(j, k, l, m)] += iweight * rhs[idx_rhs(n, j, k, m)] *
                  kernels::iK1[order][l][n];
              // TODO: Check if we store iK1 or rather its transpose
            }
          }
        }
      }
    }

    // Qt is fundamental for debugging, do not remove this.
    /*
    double* lQt = new double[basisSize * numberOfVariables];
    idx2 idx_lQt(basisSize, numberOfVariables);
    for (int j = 0; j < basisSize; j++) {
      for (int k = 0; k < basisSize; k++) {
        const double weight = kernels::gaussLegendreWeights[order][j] *
                              kernels::gaussLegendreWeights[order][k];
        const double iweight = 1.0 / weight;

        std::memset(lQt, 0, basisSize * numberOfVariables * sizeof(double));
        for (int l = 0; l < basisSize; l++) {
          for (int m = 0; m < numberOfVariables; m++) {
            for (int n = 0; n < basisSize; n++) { // t == n
              lQt[idx_lQt(l, m)] += 1./dt * lQi[idx_lQi(j, k, n, m)] *
                                          kernels::dudx[order][l][n];
            }
            printf("Qt[%d,%d] = %f\n", l, m, lQt[idx_lQt(l,m)]);
          }
        }
      }
    }
    delete[] lQt;
     */

    // 5. Exit condition
    // TODO(guera): Stability of sum? -> Kahan, reduction?
    // TODO(guera): Is there something like kernels::tol?
    // TODO(guera): Dangerous!
    const double tol = 1e-7;
    double sq_res = 0.0;
    for (int i = 0; i < basisSize3 * numberOfVariables; i++) {
      sq_res += (lQi_old[i] - lQi[i]) * (lQi_old[i] - lQi[i]);
      assertion3( !std::isnan(lQi[i]), i, dt, dx );
      assertion3( !std::isnan(lQi_old[i]), i, dt, dx );
    }
    if (sq_res < tol * tol) {
      break;
    }

    if (iter == (MaxIterations - 1)) {  // No convergence after last iteration
      static tarch::logging::Log _log("kernels::aderdg::generic::c");
      logWarning("aderPicardLoopNonlinear(...)",
          "|res|^2=" << sq_res << " > |tol|^2=" << tol * tol << " after "
          << iter << " iterations. Solver seems not to have "
          "converged properly within maximum "
          "number of iteration steps");
    }
  }  // end iter
}

void aderPredictorNonlinear(const double* lQi, const double* lFi,
    int numberOfVariables, int basisSize, double* lQhi,
    double* lFhi_x, double* lFhi_y, double* lShi) {
  // Immediately compute the time - averaged space - time polynomials

  const int basisSize2 = basisSize * basisSize;
  const int order = basisSize - 1;

  idx4 idx_lQi(basisSize, basisSize, basisSize, numberOfVariables);
  idx5 idx_lFi(basisSize, basisSize, basisSize, DIMENSIONS + 1,
      numberOfVariables);

  idx3 idx_lQhi(basisSize, basisSize, numberOfVariables);
  idx3 idx_lFhi(basisSize, basisSize, numberOfVariables);
  idx3 idx_lShi(basisSize, basisSize, numberOfVariables);

  std::memset(lQhi, 0, basisSize2 * numberOfVariables * sizeof(double));
  std::memset(lFhi_x, 0, basisSize2 * numberOfVariables * sizeof(double));
  std::memset(lFhi_y, 0, basisSize2 * numberOfVariables * sizeof(double));
  std::memset(lShi, 0, basisSize2 * numberOfVariables * sizeof(double));

  for (int j = 0; j < basisSize; j++) {
    for (int k = 0; k < basisSize; k++) {
      for (int l = 0; l < numberOfVariables; l++) {
        // Matrix-Vector Products
        for (int m = 0; m < basisSize; m++) {
          // Fortran: lQhi(:,k,j) = lQi(:,:,k,j) * wGPN(:)
          lQhi[idx_lQhi(j, k, l)] += lQi[idx_lQi(j, k, m, l)] *
              kernels::gaussLegendreWeights[order][m];

          // Fortran: lFhi_x(:,k,j) = lFh(:,1,k,j,:) * wGPN(:)
          lFhi_x[idx_lFhi(j, k, l)] += lFi[idx_lFi(m, j, k, 0, l)] *
              kernels::gaussLegendreWeights[order][m];

          // Fortran: lFhi_y(:,j,k) = lFh(:,2,:k,j,:) * wGPN(:)
          lFhi_y[idx_lFhi(k, j, l)] += lFi[idx_lFi(m, j, k, 1, l)] *
              kernels::gaussLegendreWeights[order][m];

          // Fortran: lShi(:,k,j) = lSh(:,k,j,:) * wGPN(:)
          lShi[idx_lShi(j, k, l)] += lFi[idx_lFi(m, j, k, 2, l)] *
              kernels::gaussLegendreWeights[order][m];
        }
      }
    }
  }
}

void aderExtrapolatorNonlinear(const double* lQhi, const double* lFhi_x,
    const double* lFhi_y, int numberOfVariables,
    int basisSize, double* lQhbnd, double* lFhbnd) {
  // Compute the boundary-extrapolated values for Q and F*n

  const int order = basisSize - 1;

  idx3 idx_lQhi(basisSize, basisSize, numberOfVariables);
  idx3 idx_lFhi(basisSize, basisSize, numberOfVariables);

  idx3 idx_lQhbnd(2 * DIMENSIONS, basisSize, numberOfVariables);
  idx3 idx_lFhbnd(2 * DIMENSIONS, basisSize, numberOfVariables);

  std::memset(lQhbnd, 0,
      2 * DIMENSIONS * basisSize * numberOfVariables * sizeof(double));
  std::memset(lFhbnd, 0,
      2 * DIMENSIONS * basisSize * numberOfVariables * sizeof(double));

  // x-direction: face 1 (left) and face 2 (right)
  for (int j = 0; j < basisSize; j++) {
    // Matrix-Vector Products
    for (int k = 0; k < numberOfVariables; k++) {
      for (int l = 0; l < basisSize; l++) {
        // Fortran: lQhbnd(:,j,1) = lQhi(:,:,j) * FLCoeff(:)
        lQhbnd[idx_lQhbnd(0, j, k)] +=
            lQhi[idx_lQhi(j, l, k)] * kernels::FLCoeff[order][l];

        // Fortran: lQhbnd(:,j,2) = lQhi(:,:,j) * FRCoeff(:)
        lQhbnd[idx_lQhbnd(1, j, k)] +=
            lQhi[idx_lQhi(j, l, k)] * kernels::FRCoeff[order][l];

        // Fortran: lFhbnd(:,j,1) = lFhi_x(:,:,j) * FLCoeff(:)
        lFhbnd[idx_lFhbnd(0, j, k)] +=
            lFhi_x[idx_lFhi(j, l, k)] * kernels::FLCoeff[order][l];

        // Fortran: lFhbnd(:,j,2) = lFhi_x(:,:,j) * FRCoeff(:)
        lFhbnd[idx_lFhbnd(1, j, k)] +=
            lFhi_x[idx_lFhi(j, l, k)] * kernels::FRCoeff[order][l];
      }
    }
  }

  // y-direction: face 3 (left) and face 4 (right)
  for (int j = 0; j < basisSize; j++) {
    for (int k = 0; k < numberOfVariables; k++) {
      // Matrix-Vector Products
      for (int l = 0; l < basisSize; l++) {
        // Fortran: lQhbnd(:,j,3) = lQhi(:,j,:) * FLCoeff(:)
        lQhbnd[idx_lQhbnd(2, j, k)] +=
            lQhi[idx_lQhi(l, j, k)] * kernels::FLCoeff[order][l];

        // Fortran: lQhbnd(:,j,4) = lQhi(:,j,:) * FRCoeff(:)
        lQhbnd[idx_lQhbnd(3, j, k)] +=
            lQhi[idx_lQhi(l, j, k)] * kernels::FRCoeff[order][l];

        // Fortran: lFhbnd(:,j,3) = lFhi_y(:,:,j) * FLCoeff(:)
        lFhbnd[idx_lFhbnd(2, j, k)] +=
            lFhi_y[idx_lFhi(j, l, k)] * kernels::FLCoeff[order][l];

        // Fortran: lFhbnd(:,j,4) = lFhi_y(:,:,j) * FRCoeff(:)
        lFhbnd[idx_lFhbnd(3, j, k)] +=
            lFhi_y[idx_lFhi(j, l, k)] * kernels::FRCoeff[order][l];
      }
    }
  }
}

// TODO(Dominic): Commented out for now.
//void aderSpaceTimeExtrapolatorNonlinear(const double* lQi, const double* lFi_x,
//                               const double* lFi_y, int numberOfVariables,
//                               int basisSize, double* lQbnd, double* lFbnd) {
//  // Compute the boundary-extrapolated values for Q and F*n
//
//  const int order      = basisSize - 1;
//  const int basisSize2 = basisSize * basisSize;
//
//  idx4 idx_lQi(basisSize, basisSize, basisSize, numberOfVariables);
//  idx4 idx_lFi(basisSize, basisSize, basisSize, numberOfVariables);
//
//  idx4 idx_lQbnd(2 * DIMENSIONS, basisSize, basisSize, numberOfVariables);
//  idx4 idx_lFbnd(2 * DIMENSIONS, basisSize, basisSize, numberOfVariables);
//
//  std::memset(lQbnd, 0,
//              2 * DIMENSIONS * basisSize2 * numberOfVariables * sizeof(double));
//  std::memset(lFbnd, 0,
//              2 * DIMENSIONS * basisSize2 * numberOfVariables * sizeof(double));
//
//  for (int i=0; i < basisSize; i++) { // loop over time DoF
//    // x-direction: face 1 (left) and face 2 (right)
//    for (int j = 0; j < basisSize; j++) {
//      // Matrix-Vector Products
//      for (int k = 0; k < numberOfVariables; k++) {
//        for (int l = 0; l < basisSize; l++) {
//          // Fortran: lQhbnd(:,j,1) = lQhi(:,:,j) * FLCoeff(:)
//          lQbnd[idx_lQbnd(0, i, j, k)] +=
//              lQi[idx_lQi(i, j, l, k)] * kernels::FLCoeff[order][l];
//
//          // Fortran: lQhbnd(:,j,2) = lQhi(:,:,j) * FRCoeff(:)
//          lQbnd[idx_lQbnd(1, i, j, k)] +=
//              lQi[idx_lQi(i, j, l, k)] * kernels::FRCoeff[order][l];
//
//          // Fortran: lFhbnd(:,j,1) = lFhi_x(:,:,j) * FLCoeff(:)
//          lFbnd[idx_lFbnd(0, i, j, k)] +=
//              lFi_x[idx_lFi(i,j, l, k)] * kernels::FLCoeff[order][l];
//
//          // Fortran: lFhbnd(:,j,2) = lFhi_x(:,:,j) * FRCoeff(:)
//          lFbnd[idx_lFbnd(1, i, j, k)] +=
//              lFi_x[idx_lFi(i, j, l, k)] * kernels::FRCoeff[order][l];
//        }
//      }
//    }
//
//    // y-direction: face 3 (left) and face 4 (right)
//    for (int j = 0; j < basisSize; j++) {
//      for (int k = 0; k < numberOfVariables; k++) {
//        // Matrix-Vector Products
//        for (int l = 0; l < basisSize; l++) {
//          // Fortran: lQhbnd(:,j,3) = lQhi(:,j,:) * FLCoeff(:)
//          lQbnd[idx_lQbnd(2, i, j, k)] +=
//              lQi[idx_lQi(i, l, j, k)] * kernels::FLCoeff[order][l];
//
//          // Fortran: lQhbnd(:,j,4) = lQhi(:,j,:) * FRCoeff(:)
//          lQbnd[idx_lQbnd(3, i, j, k)] +=
//              lQi[idx_lQi(i,l, j, k)] * kernels::FRCoeff[order][l];
//
//          // Fortran: lFhbnd(:,j,3) = lFhi_y(:,:,j) * FLCoeff(:)
//          lFbnd[idx_lFbnd(2, i, j, k)] +=
//              lFi_y[idx_lFi(i,j, l, k)] * kernels::FLCoeff[order][l];
//
//          // Fortran: lFhbnd(:,j,4) = lFhi_y(:,:,j) * FRCoeff(:)
//          lFbnd[idx_lFbnd(3, i, j, k)] +=
//              lFi_y[idx_lFi(i, j, l, k)] * kernels::FRCoeff[order][l];
//        }
//      }
//    }
//  }
//}
//
//void aderTimeAveragingExtrapolatorNonlinear(const double* lQi, const double* lFi_x,
//                               const double* lFi_y, int numberOfVariables,
//                               int basisSize, double* lQhbnd, double* lFhbnd) {
//  // Compute the boundary-extrapolated values for Q and F*n
//
//  const int order = basisSize - 1;
//
//  idx4 idx_lQi(basisSize, basisSize, basisSize, numberOfVariables);
//  idx4 idx_lFi(basisSize, basisSize, basisSize, numberOfVariables);
//
//  idx3 idx_lQhbnd(2 * DIMENSIONS, basisSize, numberOfVariables);
//  idx3 idx_lFhbnd(2 * DIMENSIONS, basisSize, numberOfVariables);
//
//  std::memset(lQhbnd, 0,
//              2 * DIMENSIONS * basisSize * numberOfVariables * sizeof(double));
//  std::memset(lFhbnd, 0,
//              2 * DIMENSIONS * basisSize * numberOfVariables * sizeof(double));
//
//  for (int i=0; i < basisSize; i++) { // loop over time dof
//    // x-direction: face 1 (left) and face 2 (right)
//    for (int j = 0; j < basisSize; j++) {
//      // Matrix-Vector Products
//      for (int k = 0; k < numberOfVariables; k++) {
//        for (int l = 0; l < basisSize; l++) {
//          // Fortran: lQhbnd(:,j,1) = lQhi(:,:,j) * FLCoeff(:)
//          lQhbnd[idx_lQhbnd(0, j, k)] +=
//              lQi[idx_lQi(i,j, l, k)] * kernels::FLCoeff[order][l]
//                                      * kernels::gaussLegendreWeights[order][i];
//
//          // Fortran: lQhbnd(:,j,2) = lQhi(:,:,j) * FRCoeff(:)
//          lQhbnd[idx_lQhbnd(1, j, k)] +=
//              lQi[idx_lQi(i,j, l, k)] * kernels::FRCoeff[order][l]
//                                      * kernels::gaussLegendreWeights[order][i];
//
//          // Fortran: lFhbnd(:,j,1) = lFhi_x(:,:,j) * FLCoeff(:)
//          lFhbnd[idx_lFhbnd(0, j, k)] +=
//              lFi_x[idx_lFi(i,j, l, k)] * kernels::FLCoeff[order][l]
//                                        * kernels::gaussLegendreWeights[order][i];
//
//          // Fortran: lFhbnd(:,j,2) = lFhi_x(:,:,j) * FRCoeff(:)
//          lFhbnd[idx_lFhbnd(1, j, k)] +=
//              lFi_x[idx_lFi(i,j, l, k)] * kernels::FRCoeff[order][l]
//                                        * kernels::gaussLegendreWeights[order][i];
//        }
//      }
//    }
//
//    // y-direction: face 3 (left) and face 4 (right)
//    for (int j = 0; j < basisSize; j++) {
//      for (int k = 0; k < numberOfVariables; k++) {
//        // Matrix-Vector Products
//        for (int l = 0; l < basisSize; l++) {
//          // Fortran: lQhbnd(:,j,3) = lQhi(:,j,:) * FLCoeff(:)
//          lQhbnd[idx_lQhbnd(2, j, k)] +=
//              lQi[idx_lQi(i,l, j, k)] * kernels::FLCoeff[order][l]
//                                      * kernels::gaussLegendreWeights[order][i];
//
//          // Fortran: lQhbnd(:,j,4) = lQhi(:,j,:) * FRCoeff(:)
//          lQhbnd[idx_lQhbnd(3, j, k)] +=
//              lQi[idx_lQi(i,l, j, k)] * kernels::FRCoeff[order][l]
//                                      * kernels::gaussLegendreWeights[order][i];
//
//          // Fortran: lFhbnd(:,j,3) = lFhi_y(:,:,j) * FLCoeff(:)
//          lFhbnd[idx_lFhbnd(2, j, k)] +=
//              lFi_y[idx_lFi(i,j, l, k)] * kernels::FLCoeff[order][l]
//                                        * kernels::gaussLegendreWeights[order][i];
//
//          // Fortran: lFhbnd(:,j,4) = lFhi_y(:,:,j) * FRCoeff(:)
//          lFhbnd[idx_lFhbnd(3, j, k)] +=
//              lFi_y[idx_lFi(i,j, l, k)] * kernels::FRCoeff[order][l]
//                                        * kernels::gaussLegendreWeights[order][i];
//        }
//      }
//    }
//  }
//}

}  // namespace

template <typename SolverType>
void spaceTimePredictorNonlinear(
    SolverType& solver,
    double*  lQhbnd, double* lFhbnd,
    double** tempSpaceTimeUnknowns,
    double** tempSpaceTimeFluxUnknowns,
    double*  tempUnknowns,
    double*  tempFluxUnknowns,
    double*  tempStateSizedVector,
    const double* const luh,
    const tarch::la::Vector<DIMENSIONS, double>& dx, 
    double dt,
    double* tempPointForceSources //not used, should be nullptr
    ) {

  const int numberOfVariables = solver.getNumberOfVariables();
  const int basisSize = solver.getNodesPerCoordinateAxis();
  const int basisSize2 = basisSize * basisSize;

  double* lQi     = tempSpaceTimeUnknowns[0];
  double* lQi_old = tempSpaceTimeUnknowns[1];
  double* rhs     = tempSpaceTimeUnknowns[2];
  double* rhs_0   = tempSpaceTimeUnknowns[3];

  double* lFi     = tempSpaceTimeFluxUnknowns[0];
  double* gradQ   = tempSpaceTimeFluxUnknowns[1]; // size: basisSize3 * DIMENSIONS * numberOfVariables

  double* lQhi    = tempUnknowns;

  double* lFhi    = tempFluxUnknowns;
  
  double *BGradQ  = tempStateSizedVector; // size: numberOfVariables

  aderPicardLoopNonlinear<SolverType>(solver, luh, dt, dx,
      lQi, lQi_old, rhs, rhs_0, lFi, gradQ, BGradQ);

  aderPredictorNonlinear(lQi, lFi, numberOfVariables, basisSize, lQhi,
      &lFhi[0 * basisSize2 * numberOfVariables],  // lFhi_x
      &lFhi[1 * basisSize2 * numberOfVariables],  // lFhi_y
      &lFhi[2 * basisSize2 * numberOfVariables]   // lShi
  );

  aderExtrapolatorNonlinear(
      lQhi,
      &lFhi[0 * basisSize2 * numberOfVariables],  // lFhi_x
      &lFhi[1 * basisSize2 * numberOfVariables],  // lFhi_y
      numberOfVariables, basisSize, lQhbnd, lFhbnd);
}

}  // namespace c
}  // namespace generic
}  // namespace aderdg
}  // namespace kernels

#endif  // DIMENSIONS == 2
