/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
 
#include "../../../../../../Peano/tarch/la/Vector.h"
 
#if DIMENSIONS == 3 
 
namespace kernels{
  namespace finitevolumes{
    namespace muscl{
      namespace c{
        template <void PDESolutionAdjustment(const double* const x, const double w,
                                     const double t, const double dt,
                                     double* Q)>
        void solutionAdjustment(
            double* luh, const tarch::la::Vector<DIMENSIONS, double>& center,
            const tarch::la::Vector<DIMENSIONS, double>& dx, const double t,
            const double dt, const int numberOfVariables, const int basisSize) {
          double x[3];

          for (int ii = 0; ii < basisSize; ii++) {  // loop over dof
            const double qi = ((double)(2*ii+1.0))/((double)(2*basisSize)); //linspace

            for (int jj = 0; jj < basisSize; jj++) { // loop over dof
              const double qj = ((double)(2*jj+1.0))/((double)(2*basisSize)); //linspace
            
              for (int kk = 0; kk < basisSize; kk++) {  // loop over dof
                const double qk = ((double)(2*kk+1.0))/((double)(2*basisSize)); //linspace
                // location and index of nodal degrees of freedom
                const int nodeIndex = ii + basisSize * jj + basisSize * basisSize * kk;


                x[0] = center[0] + dx[0] * (qi - 0.5);
                x[1] = center[1] + dx[1] * (qj - 0.5);
                x[2] = center[2] + dx[2] * (qk - 0.5);

                // read initial condition
                const int dofStartIndex = nodeIndex * numberOfVariables;
                PDESolutionAdjustment(x, 0, t, dt, &luh[dofStartIndex]);
              }
            }
          }
        }
      }
    }
  }
} 

#endif //DIMENSIONS == 3 
