
/////////////////////////////////////////////////
/// ExaHyPE
/// ... text ...
/// Version: 13/11/15
/////////////////////////////////////////////////
#include "peano/utils/Globals.h"

Packed-Type: int;

Constant: DIMENSIONS;
Constant: DIMENSIONS_TIMES_TWO;

class exahype::records::ADERDGCellDescription {
  /**
   * @defgroup SolverInfo Meta information on and for the solver
   */
  ///@{
  /**
   * Points to a solver in the solver registry.
   */
  parallelise persistent int solverNumber;

  /**
   * These flags indicate on which face a Riemann solve has already been
   * performed during the current traversal.
   */
  parallelise persistent packed bool riemannSolvePerformed[DIMENSIONS_TIMES_TWO];
  
  /**
   * These flags indicate which face of a cell is inside the domain.
   * If a face is not inside of the domain, it might be part
   * of the domain boundary or outside of the domain.
   * 
   * In both cases, we apply boundary conditions.
   *
   * !!! HangingVertexBookkeeper !!!
   * We need this field since the HangingVertexBookkeeper overwrites
   * DomainAdjacencyIndices by RemoteAdjacencyIndices if the rank's
   * and a remote rank's domain's overlap contains the parts of the boundary
   * or a sub-manifold that is located outside of the domain.   
   */
  parallelise persistent packed bool isInside[DIMENSIONS_TIMES_TWO];
  ///@}
  
  #ifdef Parallel  
   /**
    * Indicates if the cell this
    * cell description is associated with
    * is adjacent to a remote rank at
    * at least one of its faces.
    */
   parallelise persistent packed bool adjacentToRemoteRank;
  
  /**
   * If a neighbouring cell belonging to another rank
   * functions as a compute cell for the same solver (Type::Cell)
   * that this cell description is associated with and this
   * cell description is further a helper cell description (Type::Ancestor/EmptyAncestor/
   * Descendant/EmptyDescendany), this helper cell description needs to store data.
   * This flag is used to indicate these scenarios.
   *
   * \note This flag should be only set in MarkingForAugmentation::mergeWithNeighbour(...).
   * It should be read and be reset afterwards in MarkingForAugmentation::enterCell(...).
   * 
   * In contrast to hasToHoldDataForMasterWorkerCommunication,
   * it is updated in every grid setup iteration.
   * Flag hasToHoldDataForMasterWorkerCommunication is only
   * updated after a fork or join event.
   */
  parallelise persistent packed bool hasToHoldDataForNeighbourCommunication;
  
  /**
   * This flag is set just before a cell description is sent to a new
   * worker. 
   * 
   * It indicates that a worker cell description of type Ancestor or Descendant
   * needs to hold data to enable the allow the exchange of 
   * data between it and a master cell description.
   * 
   * In contrast to hasToHoldDataForMasterWorkerCommunication,
   * it is updated only after a fork or join event.
   */
  parallelise persistent bool hasToHoldDataForMasterWorkerCommunication;
  /**
   * Face data exchange in ExaHyPE is realised in vertices: each vertex checks
   * whether one of its adjacent faces should go to another rank. As a result, 
   * a face might be exchanged up to 2^{d-1} times. We use this flag to avoid 
   * this. See prepareSendToNeighbour() in mapping Sending.
   */
  parallelise persistent int faceDataExchangeCounter[DIMENSIONS_TIMES_TWO];
  #endif

  /**
   * The index of the ADERDGCellDescription that is the parent of
   * this ADERDGCellDescription or "-1" if no parent is specified.
   */
  parallelise persistent int parentIndex;

  /**
   * Type of a cell description.
   * Cell descriptions of type \p Cell hold cell and face data,
   * while the ones of type \p Ancestor hold only face data.
   * Both belong to the original spacetree that
   * is constructed according to solver-based refinement criteria.
   * Helper cells of type Descendant also hold face data 
   * but belong to the virtual part of the augmented spacetree that
   * is created to store prolongated face data.
   *
   * ADERDGCellDescriptions of type \p EmptyAncestor and \p EmptyDescendant
   * do not hold face data. These types are set if the cell
   * associated to this cell description is not neighbouring
   * a cell that holds a cell description of type \p
   * Cell.
   *
   * TODO(Dominic):
   * MasterWorkerBoundaryDescendant and MasterWorkerBoundaryAncestor are set
   * as type of an ADERDGCellDescription if the ADERDGCellDescription
   * needs to communicate data to a neighbour process, or a worker/master
   * process. The worker is not allowed to change the type of these cells.
   * The worker does further no
   */

  enum Type {
    Erased,
    Ancestor,
    EmptyAncestor,
    Cell,
    Descendant,
    EmptyDescendant
  };

  /**
   * @defgroup AMRInfo AMR information
   *
   * Additional information that is necessary to realise adaptive mesh
   * refinement (AMR).
   */
  ///@{
  /**
   * The type of this ADERDGCellDescription. See the documentation of Cell for
   * more details.
   */
  parallelise persistent packed Type type;

  enum RefinementEvent {
    /**
     * In this state, the cell description is ready to
     * perform operations of the ADER-DG method, e.g.,
     * the Riemann solve, the solution update etc.
     */
    None,
    /**
     * If this refinement event is set, 
     * the parent Ancestor asks its
     * children if they want to be erased. If not so,
     * the children change the RefinementEvent 
     * of the parent to None. If so,
     * they leave the parent's RefinementEvent
     * unchanged. 
     */
    ErasingChildrenRequested,
    /**
     * After all children of a parent left
     * the parent's refinement event ErasingChildrenRequested
     * unchanged, the parent changes its state
     * to this event. In the next iteration
     * the parent's children need to restrict their
     * solution up to the parent and
     * the child cell descriptions need to be
     * removed from the grid.
     */
    ErasingChildren,   
    /**
     * Change children to descendants.
     * An Ancestor cell description can adopt 
     * this status if its children can be erased 
     * w.r.t. the physics based refinement criterion
     * however one of the children is parent itself
     * to children of type Descendant.
     * In this case, we do not erase the children
     * of the Ancestor but change their type to (Empty)Descendant.
     */
    ChangeChildrenToDescendantsRequested,
    /**
     * Change children to descendants.
     * An Ancestor cell description can adopt 
     * this status if its children can be erased 
     * w.r.t. the physics based refinement criterion
     * however one of the children is parent itself
     * to children of type Descendant.
     * In this case, we do not erase the children
     * of the Ancestor but change their type to (Empty)Descendant.
     */
    ChangeChildrenToDescendants,
    
    RefiningRequested,           
    Refining,                    
    
    /**
     * This refinement event is set on 
     * a cell description of type 
     * Descendant or Cell in every 
     * grid setup iteration
     * if no other event is set. 
     * 
     * If the cell description has children,
     * the first traversed child sets
     * this event to DeaugmentingChildrenRequestedTriggered.
     * 
     * We have to rely on this mechanism since we
     * cannot guess based on the cell description type if
     * a cell description has children as opposed to the
     * physics based refinement where we have
     * Ancestor and EmptyAncestor parent cell descriptions and
     * child cell descriptions of type Cell.
     */
    DeaugmentingChildrenRequestedTriggered,
    
    /**
     * If this refinement event is set, 
     * the parent Descendant or Cell asks its
     * children if they want to be deaugmented. If not so,
     * the children change the RefinementEvent 
     * of the parent to None. If so,
     * they leave the parent's RefinementEvent
     * unchanged. 
     */
    DeaugmentingChildrenRequested,
    /**
     * After all children of a parent left
     * the parent's refinement event DeaugmentingChildrenRequested
     * unchanged, the parent changes its state
     * to this event. In the next iteration
     * the parent's children need to restrict their
     * solution up to the parent and
     * the child cell descriptions need to be
     * removed from the grid.
     */
    DeaugmentingChildren, 
    AugmentingRequested,         
    Augmenting                   
  };

  /**
   * Returns the refinement event.
   */
  parallelise persistent packed RefinementEvent refinementEvent;
  ///@}
  
  // While the above definitions are mainly flags and states, below we find the actual data.
  
  /**
   * @name CellInfo Cell Info
   *
   * Information on the grid cell this ADERDGCellDescription is associated
   * with.
   */
  ///@{
  /**
   * Space-tree level of the cell this ADERDGCellDescription is associated
   * with.
   */
  parallelise persistent int level;
  /**
   * Offset of the "lower left" node of the lower left ghost cell from the
   * lower left node of the cell.
   */
  parallelise persistent double offset[DIMENSIONS];
  /**
   * Dimension of the cell associated with this ADERDGCellDescription in the
   * respective dimension.
   */
  parallelise persistent double size[DIMENSIONS];
  ///@}
  
  /**
   * @defgroup TimeInfo Time Stamps and Step Sizes
   *
   * Time stamps and step sizes that are used for different
   * phases of the algorithm.
   */
  ///@{
  
  /**
   * The time step size the correction phase is working with.
   */
  parallelise persistent double correctorTimeStepSize;

  /**
   * The time stamp the correction phase is working with.
   */
  parallelise persistent double correctorTimeStamp;

  /**
   * The corrector time step size this cell description was working
   * with in the previous iteration.
   * 
   * This variable is necessary for performing rollbacks.
   */
  parallelise persistent double previousCorrectorTimeStepSize;
  
  /**
   * The time step size the prediction phase is working with.
   */
  parallelise persistent double predictorTimeStepSize;

  /**
   * The time stamp the prediction phase is working with.
   */
  parallelise persistent double predictorTimeStamp;
  ///@}
  /**
   * @defgroup VolumeDataIndices Volume Data Indices
   *
   * Index pointing to an array of size \f$ N_\mathrm{var}\,(N+1)^{d} \f$.
   */
  ///@{
  /**
   *  Index pointing to the solution DoF belonging to this cell.
   *  Resembles also the state of the previous time step during update
   * calculations.
   *  Symbol: \f$ u_h \f$.
   */
  parallelise persistent int solution;
  parallelise persistent int solutionAverages;
  parallelise persistent int solutionCompressed;
  
  /**
   *  Heap index pointing to the DoF of the previous solution associated with this cell
   *  description.
   *  Symbol: \f$ u_h \f$.
   *  
   *  <h2>Limiting ADER-DG solver</h2>
   *  These DoF only need to be stored for the subcell-limiting
   *  ADER-DG solver since here NaNs can appear here in the solution update
   *  DoF. We can then not use the solution Update DoF anymore for
   *  performing a rollback to the previous solution.
   */
  parallelise persistent int previousSolution;
  parallelise persistent int previousSolutionAverages;
  parallelise persistent int previousSolutionCompressed;

  /**
   * Index pointing to the update DoF belonging to this cell. All volume updates
   * and face fluctuations contribute to this Symbol. Symbol:
   * \f$ \Delta u_h \f$.
   * 
   * @deprecated
   */
  parallelise persistent int update;
  parallelise persistent int updateAverages;
  parallelise persistent int updateCompressed;
  ///@}

  /**
   * @name FaceDataIndices Face Data Indices
   *
   * Index pointing to an array of size \f$ 2\,d\,N_\mathrm{var}\,(N+1)^{d-1}
   * \f$.
   */
  ///@{
  /**
   * Index pointing to the predictor DoF extrapolated to the bounding faces of
   * the
   * cell.
   */
  parallelise persistent int extrapolatedPredictor;
  parallelise persistent int extrapolatedPredictorAverages;
  parallelise persistent int extrapolatedPredictorCompressed;

  /**
   * Index pointing to the normal fluxes computed at the bounding faces of the
   * cell.
   */
  parallelise persistent int fluctuation;
  parallelise persistent int fluctuationAverages;
  parallelise persistent int fluctuationCompressed;
  ///@}
  
  /**
   * Pointer to DIMENSIONS_TIMES_TWO \times _numberOfUnknowns doubles.
   *
   * First, all the _numberOfUnknowns entries of the left face are stored, then
   * the _numberOfUnknowns of the right face and so forth.
   */
  parallelise persistent int solutionMin;
  parallelise persistent int solutionMax;
  
  enum LimiterStatus {
    /**
     * A cell holds a physically admissible ADER-DG solution
     * that satisfies a discrete maximum principle.
     */
    Ok,
    /**
     * A cell can obtain this status only during the limiter
     * status spreading stage. It indicates that the cell
     * is direct neighbour to the neighbour of a troubled cell. 
     */
    NeighbourIsNeighbourOfTroubledCell,
    /**
     * A cell can obtain this status only during the limiter
     * status spreading stage. It indicates that the cell
     * is direct neighbour to a troubled cell. 
     */
    NeighbourIsTroubledCell,
    /**
     * A cell (still) holds a physically wrong ADER-DG solution. 
     */
    Troubled
  };
  
  /**
   * The cell descriptions limiter status.
   */
  parallelise persistent LimiterStatus limiterStatus;
  
  /**
   * Here, we store the results of the limiter status merging.
   */
  parallelise persistent LimiterStatus mergedLimiterStatus[DIMENSIONS_TIMES_TWO];

  enum CompressionState {
    Uncompressed,
    CurrentlyProcessed,
    Compressed
  };
  parallelise persistent packed CompressionState compressionState;

  /**
   * We use a 7 to indicate that compression does not pay off at all. Please
   * note that the encoding follows peano::heap::findMostAgressiveCompression()
   * which returns not the bytes actually used but the bytes spent on the 
   * mantissa. Less than two byes is not supported by ExaHyPE actually.
   */
  parallelise persistent packed int bytesPerDoFInPreviousSolution      from 1 to 7;
  parallelise persistent packed int bytesPerDoFInSolution              from 1 to 7;
  parallelise persistent packed int bytesPerDoFInUpdate                from 1 to 7;
  parallelise persistent packed int bytesPerDoFInExtrapolatedPredictor from 1 to 7;
  parallelise persistent packed int bytesPerDoFInFluctuation           from 1 to 7;
};
